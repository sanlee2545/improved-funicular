* KNN Search Algorithm Implementations
- Ball Tree
- Locality Sensitive Hashing
- Vanilla KNN
** Dependencies and Requirements
Python3
** How to Run Program
Download all ~*.py~ files and use ~python main.py~ to run a test of
the three different algorithms. The time and error will be measured
and displayed. The ~test_knn()~ method in ~nearest_neighbors.py~ will
generate a dataset of points ~(x, f(x))~ where ~f(x)=x^2+w~ and ~w~ is
a random noise term in ~[-1,+1]~.
** Repository Contents
- ~ball_tree.py~ : The ball tree class.
- ~functions.py~ : Miscellaneous functions.
- ~main.py~ : Main function.
- ~nearest_neighbors.py~ : The nearest neighbors predictor class.
** Sources
*** [[https://en.wikipedia.org/wiki/Ball_tree][Ball Tree -- Wikipedia]]
For the construction and search algorithms for Ball Trees.
*** /Foundations of Multidimensional and Metric Data Structures/ by Samet
For the informative example of Locality Sensitive Hashing given by
figure 4.99 on page 713.
*** /Introduction to Algorithms/ by CLRS
For the Insertion Sort algorithm and the Priority Queue data
structure.
*** /Nearest Neighbor Methods in Learning and Vision/ by Shakhnarovich, Darrell, and Indyk
For the general background knowledge on exact and approximate nearest
neighbor methods.
*** [[https://docs.python.org/3/tutorial/datastructures.html#more-on-lists][Python Tutorial Part 5]]
For the matrix transpose code in section 5.1.4.
*** /Similarity Search in High Dimensions via Hashing/ by Gionis, Indyk, and Motwani
For the Locality Sensitive Hashing algorithm and suggestions for
parameter values and hash function.
*** /Understanding Machine Learning/ by Shalev-Shwartz and Ben-David
For the vanilla KNN search algorithm.
